language: generic

before_install_linux: &linux_setup
  - mkdir mason && curl -sSfL https://github.com/mapbox/mason/archive/v0.2.0.tar.gz | tar --gunzip --extract --strip-components=1 --directory=./mason
  - ./mason/mason install gdb 7.12
  - sudo ln -s $(./mason/mason prefix gdb 7.12)/bin/gdb /usr/local/bin/gdb
  - which gdb
  # attempt to workaroung "ptrace: Operation not permitted"
  - sudo chmod +s $(which gdb)
  # To ensure that the --setup command is working we start off by
  # manually creating a bogus core pattern
  - sudo bash -c 'echo "dummy" > /proc/sys/kernel/core_pattern'
  # https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace
  # https://www.kernel.org/doc/Documentation/security/Yama.txt
  - cat /proc/sys/kernel/yama/ptrace_scope
  - sudo bash -c 'echo 0 > /proc/sys/kernel/yama/ptrace_scope'

before_install_osx: &osx_setup
  # To ensure that the --setup command is working we start off by
  # manually creating a bogus core pattern
  - sudo sysctl kern.corefile=dummy
  - brew install coreutils || true
  - export PATH=$(brew --prefix)/opt/coreutils/libexec/gnubin:${PATH}
  - which lldb
  - lldb --version

install_default: &run_install
  # disable node that may be already enabled via nvm
  - nvm unload || true
  # clear out brew installed node otherwise install-node may fail trying to overwrite it
  - if [[ $(uname -s) == 'Darwin' ]]; then brew rm node || true; fi;
  # install-node is a good solution given https://github.com/travis-ci/travis-ci/issues/1350
  # which causes `source nvm.sh && sudo node ...` to fail
  - curl -sSfL https://s3.amazonaws.com/mapbox/apps/install-node/v2.0.0/run -o run
  - chmod +x ./run
  - sudo NV=4.4.3 NP=$(uname | tr A-Z a-z)-x64 OD=/usr/local ./run
  - export PATH=/usr/local/bin:${PATH}
  - /usr/local/bin/node --version
  - which node
  - node --version
  - npm --version

script_default: &run_script
 - sudo ./bin/logbt --setup
 - ./bin/logbt --test
 - ./test/unit.sh

services:
  - docker

matrix:
  include:
    - os: linux
      env: DOCKER=PID1-signal
      dist: trusty
      sudo: required
      script:
        - ./test/docker-snapshotting.sh TERM
        - ./test/docker-snapshotting.sh HUP
        # TODO: INT never reaches logbt on linux
        #- ./test/docker-snapshotting.sh INT
    - os: linux
      env: DOCKER=writable-proc
      dist: trusty
      sudo: required
      script:
        - docker build -t logbt-precise1 -f Dockerfile.writable-proc .
        - docker run --cap-add SYS_PTRACE --volume /proc:/writable-proc logbt-precise1
        - cat /proc/sys/kernel/core_pattern
    - os: linux
      env: DOCKER=readonly
      dist: trusty
      sudo: required
      script:
        - docker build -t logbt-precise2 -f Dockerfile.readonly .
        - sudo ./bin/logbt --setup
        - docker run --cap-add SYS_PTRACE logbt-precise2
        - cat /proc/sys/kernel/core_pattern
    - os: linux
      env: DOCKER=privileged
      dist: trusty
      sudo: required
      script:
        - docker build -t logbt-precise3 -f Dockerfile .
        - docker run --privileged logbt-precise3
        - cat /proc/sys/kernel/core_pattern
    - os: linux
      env: DOCKER=readonly-from-host
      dist: trusty
      sudo: required
      script:
        - docker build -t logbt-precise4 -f Dockerfile.logbt-from-host .
        - sudo ./bin/logbt --setup
        - docker run --cap-add SYS_PTRACE -v $(pwd)/bin/logbt:/usr/local/bin/logbt logbt-precise4
    - os: linux
      dist: precise
      sudo: required
      env: CXX=clang++
      before_install: *linux_setup
      install: *run_install
      before_script:
        - ./mason/mason install clang++ 3.8.1
        - sudo ln -s $(./mason/mason prefix clang++ 3.8.1)/bin/clang++ /usr/local/bin/clang++
        - which clang++
      script: *run_script
    - os: linux
      dist: trusty
      sudo: required
      env: CXX=g++-6
      addons:
        apt:
          sources: [ 'ubuntu-toolchain-r-test']
          packages: [ 'g++-6']
      before_install: *linux_setup
      install: *run_install
      script: *run_script
    - os: linux
      dist: precise
      sudo: required
      env: CXX=g++
      before_install: *linux_setup
      install: *run_install
      script: *run_script
    - os: osx
      osx_image: xcode11
      before_install: *osx_setup
      install: *run_install
      script: *run_script
